  ssbcc
*   add search paths for includes
1   generate memories for RAM and ROM
    add interrupt handling
    add optional fast version of the data and return stacks
    do VHDL
    add exception handler
    clean up temporary files

  core/9x8
    core.v
*     add 16-bit addition/subtraction unsigned/signed operators
        - debug
        - what's the new speed?
        - add and debug 32-bit math library
*     change comparisons to 0=, 0<>, -1=, and -1<>
*     change jump and jumpc to include the call and callc opcodes by pushing the PC onto the return stack and
        - this reduces the jump address space by 1 bit (from 16K to 8K)
1     finish the core
2     fully debug the core
      resolve ISE synthesizing 50 slices instead of 36
    asm
      add loop labels to the output instruction list
      implement .constant directive
      implement .abbr directive
1     fully process .memory and .variable directives
      reduce range of fetch instruction
      add .fetch(name,N) and .store(name,N) macros
      process strings and their escape characters correctly, process both counted and null-terminated strings
      add optimizer
        - "dup push outport drop" ==> "push outport"
        - "XXX return nop" ==> "return XXX" where XXX doesn't involve the return stack
        - "dup push store drop" ==> "push store"
      add exception handler
    core.vhd
      do this once core.v is completed

  license
    - look at http://creativecommons.org/licenses/by-sa/
      - used by Gumstix
