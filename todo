  ssbcc
1   generate memories for RAM and ROM
    add interrupt handling
    add optional fast version of the data and return stacks
    do VHDL
    add exception handler
    clean up temporary files

  core/9x8
    core.v
1     finish the core
        - store and fetch
2     fully debug the core
      resolve ISE synthesizing 50 slices instead of 36
    asm
      add loop labels to the output instruction list
      implement .constant directive
      implement .abbr directive
1     fully process .memory and .variable directives
      reduce range of fetch instruction
      add .fetch(name,N) and .store(name,N) macros
      process strings and their escape characters correctly, process both counted and null-terminated strings
      add optimizer
        - "dup push outport drop" ==> "push outport"
        - "XXX return nop" ==> "return XXX" where XXX doesn't involve the return stack
        - "dup push store drop" ==> "push store"
        - "push+outport+drop push+jump/call+nop" ==> "push+outport push+jump/call+drop"
      add exception handler
    core.vhd
      do this once core.v is completed

  lib/9x8/math.s
    -- add_u8_u32__u32, ...
    -- sub_uX_uY__uZ, X,Y,Z \in {8,16,24,32}, Z \in min(X,Y)+{0,8}, Z<=32
    -- add signed versions

  lib/9x8/forth.s
    -- identify good instructions to include

  license
    - look at http://creativecommons.org/licenses/by-sa/
      - used by Gumstix

  publicize
    - opencores
    - github
    - ssbcc.net
    - ssbcc@sinclairrf.com or rodney@ssbcc.net
