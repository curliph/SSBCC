#!/usr/bin/python

################################################################################
#
# Copyright 2012, Sinclair R.F., Inc.
#
# Build an SSBCC system.
#
################################################################################

import os
import re
import sys
import tempfile

################################################################################
#
# Parse the command line arguments
#
################################################################################

#
# Construct the command-line argument list parser
#

import argparse
argListParser = argparse.ArgumentParser(description='SSBCC system builder');
argListParser.add_argument('filename', metavar='filename', type=file, help='SSBCC configuration file');
argList = argListParser.parse_args();

#
# Read the SSBCC configuration file.
#

ixLine = 0;
compiler = [];
inport = dict(config=list(), name=list(), id=list());
memories = list();
outport = dict(config=list(), name=list(), id=list());
user_header = list();
for line in argList.filename:
  ixLine = ixLine + 1;
  # Reject blank and comment lines
  if re.match(r'\s*(#.*)?$',line):
    pass;
  # ARCHITECTURE
  elif re.match(r'\s*ARCHITECTURE\s',line):
    cmd = re.findall(r'\s*ARCHITECTURE\s+(\S+)',line);
    if not cmd:
      raise Exception('Malformed ARCHITECTURE statement on line %d: "%s"' % (ixLine,line));
    architecture=cmd[0];
  # ASSEMBLY language for processor code
  elif re.match(r'\s*ASSEMBLY\s',line):
    cmd = re.findall(r'\s*ASSEMBLY\s+(\S.*)',line);
    compiler = ('asm',cmd[0],);
  elif re.match(r'\s*HDL\s',line):
    cmd = re.findall(r'\s*HDL\s+(\S*)\s+(\S*)', line);
    if cmd[0][0] in ('Verilog','VHDL',):
      hdl = cmd[0][0];
      outCoreName = cmd[0][1];
    else:
      raise Exception('Unrecognized HDL: "%s"' % cmd[0]);
  # INPORT
  elif re.match(r'\s*INPORT\s',line):
    cmd = re.findall(r'\s*INPORT\s+(\S+)\s+(\S+)\s+(\w+)',line);
    configs = re.findall(r'([^,]+)',cmd[0][0]);
    names = re.findall(r'([^,]+)',cmd[0][1]);
    if len(configs) != len(names):
      raise Exception('Malformed INPORT statement -- number of options don\'t match on line %d: "%s"' % (ixLine,line));
    inport['config'].append(configs);
    inport['name'].append(names);
    inport['id'].append(cmd[0][2]);
  # MEMORY
  elif re.match(r'\s*MEMORY\s',line):
    cmd = re.findall(r'\s*MEMORY\s+(\S+)\s+(\S+)',line);
    if (not cmd) or (len(cmd[0])<2):
      raise Exception('Malformed MEMORY statement on line %d: "%s"' % (ixLine,line));
    memories.append(cmd[0]);
  # OUTPORT
  elif re.match(r'\s*OUTPORT\s',line):
    cmd = re.findall(r'\s*OUTPORT\s+(\S+)\s+(\S+)\s+(\w+)',line);
    configs = re.findall(r'([^,]+)',cmd[0][0]);
    names = re.findall(r'([^,]+)',cmd[0][1]);
    if len(configs) != len(names):
      raise Exception('Malformed INPORT statement -- number of options don\'t match on line %d: "%s"' % (ixLine,line));
    outport['config'].append(configs);
    outport['name'].append(names);
    outport['id'].append(cmd[0][2]);
  elif re.match(r'\s*USER_HEADER\s',line):
    user_header_done = False;
    for line in argList.filename:
      if re.match(r'\s*END_USER_HEADER\s',line):
        user_header_done = True;
        break;
      user_header.append(line[0:-1]);
    if not user_header_done:
      raise Exception('No "END_USER_HEADER" found for "USER_HEADER"');
  else:
    raise Exception('Unrecognized configuration command on line %d: "%s"' % (ixLine,line));
argList.filename.close();

corepath = '%s/%s' % (sys.path[0], architecture);

################################################################################
#
# Compile the processor code.
#
################################################################################

# Generate a random name for the temporary file holding the compiler output.
# Ensure the temporary file is located off of the project path instead of
# accumulating in /tmp.
assemblerOutput = tempfile.mktemp(prefix='tmp-',suffix='.asm');
assemblerOutput = os.path.basename(assemblerOutput);
assemblerOutput = os.path.join('tmp',assemblerOutput);

if not os.path.exists('tmp'):
  os.mkdir('tmp');

# Compute the command to invoke the compiler.
cmd = os.path.join(corepath, compiler[0]);
for ix in range(len(inport['config'])):
  cmd += (' -I %s=%d' % (inport['id'][ix],ix));
for ix in range(len(outport['config'])):
  cmd += (' -O %s=%d' % (outport['id'][ix],ix));
cmd += ' -o ' + assemblerOutput;
cmd += ' ' + compiler[1];

# Invoke the compiler and exit if it failed.
print 'Invoking the assember with the following command:  ' + cmd;
cmdStatus = os.system(cmd);
if cmdStatus != 0:
  raise Exception('FATAL ERROR running the assembler');

################################################################################
#
# Generate the processor core.
#
################################################################################

if hdl == 'Verilog':
  fpRawCore = open(os.path.join(corepath,'core.v'),'r');
  fpOutCore = open(outCoreName+'.v','w');
elif hdl == 'VHDL':
  fpRawCore = open(os.path.join(corepath,'core.vhd'),'r');
  fpOutCore = open(outCoreName+'.vhd','w');
else:
  raise Exception('Program Bug:  unrecognized hdl = "%s"', hdl);
for line in fpRawCore:
  if not re.match('..@SSBCC@',line):
    fpOutCore.write(line);
    continue;
  fillCommand = re.findall('..@SSBCC@\s+(\S+)',line)[0];
  if fillCommand == 'module':
    if hdl == 'Verilog':
      fpOutCore.write('module %s(\n' % outCoreName);
      fpOutCore.write('  // synchronous reset and processor clock\n');
      fpOutCore.write('  input         i_rst,\n');
      fpOutCore.write('  input         i_clk');
      if inport['config']:
        for ix in range(len(inport['config'])):
          fpOutCore.write(',\n');
          fpOutCore.write('  // inport ports\n');
          configs = inport['config'][ix];
          names = inport['name'][ix];
          for jx in range(len(configs)):
            if (ix != 0) or (jx != 0):
              fpOutCore.write(',\n');
            if re.match(r'\d+-bit',configs[jx]):
              a = re.findall(r'(\d+)',configs[jx]);
              portLength = int(a[0]);
              if portLength == 1:
                fpOutCore.write('  input         %s' % names[jx]);
              elif portLength < 10:
                fpOutCore.write('  input   [%d:0] %s' % (portLength-1,names[jx]));
              else:
                fpOutCore.write('  input  [%d:0] %s' % (portLength-1,names[jx]));
            elif configs[jx] == 'strobe':
              fpOutCore.write('  output        %s' % names[jx]);
            else:
              raise Exception('Unrecognized INPORT type: "%s"' % configs[jx]);
      if outport['config']:
        for ix in range(len(outport['config'])):
          fpOutCore.write(',\n');
          fpOutCore.write('  // outport ports\n');
          configs = outport['config'][ix];
          names = outport['name'][ix];
          for jx in range(len(configs)):
            if (ix != 0) or (jx != 0):
              fpOutCore.write(',\n');
            if re.match(r'\d+-bit',configs[jx]):
              a = re.findall(r'(\d+)',configs[jx]);
              portLength = int(a[0]);
              if portLength == 1:
                fpOutCore.write('  output        %s' % names[jx]);
              elif portLength < 10:
                fpOutCore.write('  output  [%d:0] %s' % (portLength-1,names[jx]));
              else:
                fpOutCore.write('  output [%d:0] %s' % (portLength-1,names[jx]));
            elif configs[jx] == 'strobe':
              fpOutCore.write('  output        %s' % names[jx]);
            else:
              raise Exception('Unrecognized INPORT type: "%s"' % configs[jx]);
      fpOutCore.write('\n');
      fpOutCore.write(');\n');
    if hdl == 'VHDL':
      raise Exception('VHDL not implemented');
  elif fillCommand == 'user_header':
    for ix in range(len(user_header)):
      if hdl == 'Verilog':
        fpOutCore.write('// %s\n' % user_header[ix]);
      elif hdl == 'VHDL':
        fpOutCore.write('-- %s\n' % user_header[ix]);
      else:
        raise Exception('Unimplemented language %s' % hdl);
  else:
    print 'WARNING:  Unimplemented command ' + fillCommand;
